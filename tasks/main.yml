###########################
# Todo
# Create TGCO user for management
# Create SystemD
# test if database generation is required
#########################

- name: generating TGCO User
  user:
    name: "tgco"
    shell: "{{ item.shell | default('/bin/bash') }}"
    system: True
    comment: "the great code off user"
    update_password: on_create
    password: "{{ tgco_secret_key | password_hash('sha512') }}"

- name: Create The-Great-code-off-directory
  ansible.builtin.file:
    path: "{{ tgco_path }}"
    group: tgco
    owner: tgco
    state: directory
    mode: '0744'

- name: setting up files
  copy:
    src: files/
    dest: "{{ tgco_path }}/"
    owner: tgco
    group: tgco

- name: setting up manager
  copy:
    src: files/manage.py
    dest: "{{ tgco_path }}/manage.py"
    owner: tgco
    group: tgco
    mode: '0744'

- name: Setting up TGCO setings
  template:
    src: settings.py.j2
    dest: "{{ tgco_path }}/performance/settings.py"
    owner: tgco
    group: tgco
    mode: '0744'


- name: Install tgco requirements
  pip: 
    requirements: "{{ tgco_path }}/requirements.txt"
    virtualenv: "{{ tgco_venv }}"
  become: True
  become_user: tgco

    #virtualenv_python: python3.11.0 

# Run syncdb on the application

- name: check if database already exists
  stat:
    path: "{{ tgco_path }}/db.sqlite3"
  register: tgco_database

- name: deploy database
  become: true
  become_user: tgco
  django_manage:  # activating manage.py
    command: "migrate api"
    project_path: "{{ tgco_path }}"
    virtualenv: "{{ tgco_venv }}"
  when: not tgco_database.stat.exists
    

- name: deploy tgco unit
  template:
    src: tgco.service.j2
    dest: /etc/systemd/system/tgco.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - systemd daemon reload
    - start the great code off
    - restart the great code off

- name: Enable tgco unit
  systemd:
    name: tgco.service
    enabled: yes
